{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPw7mGVMefUc4cVfjC0/TEb"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"89PuGl57t6hB","executionInfo":{"status":"ok","timestamp":1686751673503,"user_tz":-345,"elapsed":21380,"user":{"displayName":"Aayush Shrestha","userId":"17007472471446368559"}},"outputId":"a858a74b-fceb-48b5-f759-34cdc1766b43"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["# mounting google drive\n","import cv2\n","from google.colab import drive\n","drive.mount(\"/content/drive\")\n"]},{"cell_type":"code","source":["import cv2\n","import numpy as np\n","from cv2 import CascadeClassifier\n","import os\n","from cv2 import imread\n","from google.colab.patches import cv2_imshow\n","from cv2 import waitKey\n","from cv2 import destroyAllWindows\n","from cv2 import CascadeClassifier\n","import random\n","from keras.preprocessing.image import ImageDataGenerator\n","\n","\n","def preprocessImages(raw_data_dir, preprocessed_data_dir):\n","\n","  datagen = ImageDataGenerator(\n","      rotation_range=30,\n","      width_shift_range=0.1,\n","      height_shift_range=0.1,\n","      shear_range=0.2,\n","      zoom_range=0.2,\n","      horizontal_flip=True,\n","      )\n","\n","  # Define the target size for resizing\n","  target_size = (128, 128)\n","\n","  # Define the number of augmented images to generate\n","  num_augmented_images = 100\n","\n","  # Iterate over the raw images in the directory\n","  for image_file in os.listdir(raw_data_dir):\n","    image_path = os.path.join(raw_data_dir, image_file)\n","\n","    print(image_file)\n","    for imageName in os.listdir(image_path):\n","\n","      # Load the image\n","      image_dir = os.path.join(image_path, imageName)\n","      image = cv2.imread(image_dir)\n","\n","      # Resize the image\n","      resized_image = cv2.resize(image, target_size)\n","\n","      temp = 0\n","      input_image = cv2.cvtColor(resized_image, cv2.COLOR_BGR2RGB)\n","      input_image = np.array(input_image)\n","      input_image = input_image.reshape((1,) + input_image.shape)  # Reshape for single image\n","\n","      # Apply data augmentation to generate additional images\n","      for i in range(num_augmented_images):\n","        temp +=1\n","        if temp == num_augmented_images:\n","          break\n","\n","        augmented_images = datagen.flow(input_image, batch_size=1, save_format='jpg')\n","        augmented_image = next(augmented_images)[0]\n","        augmented_image = augmented_image.astype(np.uint8)\n","\n","          # Perform face detection and crop the image to the face region\n","        face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')\n","        faces = face_cascade.detectMultiScale(augmented_image, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))\n","\n","        # Iterate over the detected faces\n","        for (x, y, w, h) in faces:\n","            # store_dir = os.path.join(preprocessed_data_dir, image_file, imageName)\n","            # new_dir = os.path.join(store_dir, f'face_{image_file.split(\".\")[0]}')\n","            store_dir = os.path.join(preprocessed_data_dir, image_file)\n","            print(store_dir)\n","            os.makedirs(store_dir, exist_ok=True)\n","            # Crop the image to the face region\n","            cropped_image = augmented_image[y:y+h, x:x+w]\n","\n","            # Save the augmented image with a unique filename\n","            augmented_image_filename = f'{imageName.split(\".\")[0]}_{i}.jpg'\n","            augmented_image_path = os.path.join(store_dir, augmented_image_filename)\n","            cv2.imwrite(augmented_image_path, cropped_image)\n","\n","# Define the directory containing the raw images\n","# raw_data_dir = '/content/drive/MyDrive/Colab Notebooks/Assignment2/train'\n","raw_train_data_dir = '/content/drive/MyDrive/AI/datasets/train'\n","raw_validation_data_dir = '/content/drive/MyDrive/AI/datasets/validation'\n","\n","# Define the output directory for the preprocessed dataset\n","preprocessed_train_data_dir = '/content/sample_data/preprocessed_dataset/train'\n","preprocessed_validation_data_dir = '/content/sample_data/preprocessed_dataset/validation'\n","\n","# Create the output directory if it doesn't exist\n","os.makedirs(preprocessed_train_data_dir, exist_ok=True)\n","os.makedirs(preprocessed_validation_data_dir, exist_ok=True)\n","\n","preprocessImages(raw_train_data_dir, preprocessed_train_data_dir)\n","preprocessImages(raw_validation_data_dir, preprocessed_validation_data_dir)\n","\n","\n","\n","\n","\n"],"metadata":{"id":"YkGCv91Ct-Xw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Deep Learning CNN model to recognize face\n","'''This script uses a database of images and creates CNN model on top of it to test\n","   if the given image is recognized correctly or not'''\n","\n","'''####### IMAGE PRE-PROCESSING for TRAINING and TESTING data #######'''\n","\n","# Specifying the folder where images are present\n","\n","\n","\n","# Understand more about ImageDataGenerator at below link\n","# https://blog.keras.io/building-powerful-image-classification-models-using-very-little-data.html\n","\n","# Defining pre-processing transformations on raw images of training data\n","# These hyper parameters helps to generate slightly twisted versions\n","# of the original image, which leads to a better model, since it learns\n","# on the good and bad mix of images\n","# train_datagen = ImageDataGenerator(\n","#         shear_range=0.1,\n","#         zoom_range=0.1,\n","#         horizontal_flip=True,\n","#         rotation_range=20,\n","#         width_shift_range=0.1,\n","#         height_shift_range=0.1,\n","#          fill_mode='nearest')\n","\n","# # Defining pre-processing transformations on raw images of testing data\n","# # No transformations are done on the testing images\n","TrainingImagePath = '/content/sample_data/preprocessed_dataset/train'\n","validationImagePath = '/content/sample_data/preprocessed_dataset/validation'\n","\n","train_datagen = ImageDataGenerator()\n","test_datagen = ImageDataGenerator()\n","\n","# # Generating the Training Data\n","training_set = train_datagen.flow_from_directory(\n","        TrainingImagePath,\n","        target_size=(64, 64),\n","        batch_size=20,\n","        class_mode='categorical')\n","\n","\n","# Generating the Testing Data\n","test_set = test_datagen.flow_from_directory(\n","        validationImagePath,\n","        target_size=(64, 64),\n","        batch_size=20,\n","        class_mode='categorical')\n","\n","# Printing class labels for each face\n","training_set.class_indices"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PNhNqbVUwFU5","executionInfo":{"status":"ok","timestamp":1686752798711,"user_tz":-345,"elapsed":696,"user":{"displayName":"Aayush Shrestha","userId":"17007472471446368559"}},"outputId":"ff56f605-3ac6-44cb-b014-88dcab8f429a"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 1852 images belonging to 10 classes.\n","Found 908 images belonging to 10 classes.\n"]},{"output_type":"execute_result","data":{"text/plain":["{'face1': 0,\n"," 'face10': 1,\n"," 'face2': 2,\n"," 'face3': 3,\n"," 'face4': 4,\n"," 'face5': 5,\n"," 'face6': 6,\n"," 'face7': 7,\n"," 'face8': 8,\n"," 'face9': 9}"]},"metadata":{},"execution_count":16}]},{"cell_type":"code","source":["'''############ Creating lookup table for all faces ############'''\n","# class_indices have the numeric tag for each face\n","TrainClasses=training_set.class_indices\n","\n","# Storing the face and the numeric tag for future reference\n","ResultMap={}\n","for faceValue,faceName in zip(TrainClasses.values(),TrainClasses.keys()):\n","    ResultMap[faceValue]=faceName\n","\n","# Saving the face map for future reference\n","import pickle\n","with open(\"ResultsMap.pkl\", 'wb') as fileWriteStream:\n","    pickle.dump(ResultMap, fileWriteStream)\n","\n","# The model will give answer as a numeric tag\n","# This mapping will help to get the corresponding face name for it\n","print(\"Mapping of Face and its ID\",ResultMap)\n","\n","# The number of neurons for the output layer is equal to the number of faces\n","OutputNeurons=len(ResultMap)\n","print('\\n The Number of output neurons: ', OutputNeurons)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"99eYkBsWwg8V","executionInfo":{"status":"ok","timestamp":1686752804409,"user_tz":-345,"elapsed":505,"user":{"displayName":"Aayush Shrestha","userId":"17007472471446368559"}},"outputId":"77fde07b-0773-4541-c316-99df472ff69b"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Mapping of Face and its ID {0: 'face1', 1: 'face10', 2: 'face2', 3: 'face3', 4: 'face4', 5: 'face5', 6: 'face6', 7: 'face7', 8: 'face8', 9: 'face9'}\n","\n"," The Number of output neurons:  10\n"]}]},{"cell_type":"code","source":["'''######################## Create CNN deep learning model ########################'''\n","\n","from keras.models import Sequential\n","from keras.layers import Convolution2D\n","from keras.layers import MaxPool2D\n","from keras.layers import Flatten\n","from keras.layers import Dropout\n","from keras.layers import Dense\n","\n","'''Initializing the Convolutional Neural Network'''\n","classifier= Sequential()\n","\n","''' STEP--1 Convolution\n","# Adding the first layer of CNN\n","# we are using the format (64,64,3) because we are using TensorFlow backend\n","# It means 3 matrix of size (64X64) pixels representing Red, Green and Blue components of pixels\n","'''\n","classifier.add(Convolution2D(32, kernel_size=(3, 3), strides=(1, 1), input_shape=(64,64,3), activation='relu'))\n","\n","'''# STEP--2 MAX Pooling'''\n","classifier.add(MaxPool2D(pool_size=(2,2)))\n","\n","'''############## ADDITIONAL LAYER of CONVOLUTION for better accuracy #################'''\n","classifier.add(Convolution2D(64, kernel_size=(3, 3), strides=(1, 1), activation='relu'))\n","\n","classifier.add(MaxPool2D(pool_size=(2,2)))\n","\n","classifier.add(Convolution2D(64, kernel_size=(3, 3), strides=(1, 1), activation='relu'))\n","\n","classifier.add(MaxPool2D(pool_size=(2,2)))\n","\n","'''# STEP--3 FLattening'''\n","classifier.add(Flatten())\n","classifier.add(Dropout(0.5))\n","\n","'''# STEP--4 Fully Connected Neural Network'''\n","classifier.add(Dense(64, activation='relu'))\n","\n","classifier.add(Dense(OutputNeurons, activation='softmax'))\n","\n","'''# Compiling the CNN'''\n","#classifier.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","classifier.compile(loss='categorical_crossentropy', optimizer = 'adam', metrics=[\"accuracy\"])\n","\n","\n","# Starting the model training\n","history = classifier.fit(\n","                    training_set,\n","                    epochs=7,\n","                    validation_data=test_set,\n","                    validation_steps=3)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ay9QR7SRwkXb","executionInfo":{"status":"ok","timestamp":1686754080274,"user_tz":-345,"elapsed":323847,"user":{"displayName":"Aayush Shrestha","userId":"17007472471446368559"}},"outputId":"351573cd-135c-43cf-d1c1-4c38d6a2c7a5"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/20\n","93/93 [==============================] - 16s 157ms/step - loss: 3.6369 - accuracy: 0.4433 - val_loss: 0.7932 - val_accuracy: 0.8333\n","Epoch 2/20\n","93/93 [==============================] - 14s 154ms/step - loss: 0.3817 - accuracy: 0.8731 - val_loss: 0.5302 - val_accuracy: 0.7667\n","Epoch 3/20\n","93/93 [==============================] - 15s 159ms/step - loss: 0.1441 - accuracy: 0.9530 - val_loss: 0.0100 - val_accuracy: 1.0000\n","Epoch 4/20\n","93/93 [==============================] - 15s 164ms/step - loss: 0.2357 - accuracy: 0.9293 - val_loss: 0.1240 - val_accuracy: 0.9667\n","Epoch 5/20\n","93/93 [==============================] - 14s 153ms/step - loss: 0.1400 - accuracy: 0.9568 - val_loss: 0.5084 - val_accuracy: 0.8667\n","Epoch 6/20\n","93/93 [==============================] - 14s 153ms/step - loss: 0.1610 - accuracy: 0.9568 - val_loss: 0.1717 - val_accuracy: 0.9500\n","Epoch 7/20\n","93/93 [==============================] - 14s 154ms/step - loss: 0.0531 - accuracy: 0.9870 - val_loss: 0.0039 - val_accuracy: 1.0000\n","Epoch 8/20\n","93/93 [==============================] - 14s 155ms/step - loss: 0.0177 - accuracy: 0.9946 - val_loss: 0.1340 - val_accuracy: 0.9500\n","Epoch 9/20\n","93/93 [==============================] - 14s 149ms/step - loss: 0.0319 - accuracy: 0.9941 - val_loss: 0.2024 - val_accuracy: 0.9667\n","Epoch 10/20\n","93/93 [==============================] - 14s 152ms/step - loss: 0.0176 - accuracy: 0.9935 - val_loss: 0.0499 - val_accuracy: 0.9833\n","Epoch 11/20\n","93/93 [==============================] - 14s 152ms/step - loss: 0.3899 - accuracy: 0.8996 - val_loss: 1.4655 - val_accuracy: 0.4167\n","Epoch 12/20\n","93/93 [==============================] - 14s 152ms/step - loss: 1.3284 - accuracy: 0.5373 - val_loss: 0.8965 - val_accuracy: 0.7000\n","Epoch 13/20\n","93/93 [==============================] - 14s 152ms/step - loss: 0.4611 - accuracy: 0.8494 - val_loss: 0.1673 - val_accuracy: 0.9667\n","Epoch 14/20\n","93/93 [==============================] - 14s 151ms/step - loss: 0.1352 - accuracy: 0.9584 - val_loss: 0.1858 - val_accuracy: 0.9000\n","Epoch 15/20\n","93/93 [==============================] - 14s 152ms/step - loss: 0.0653 - accuracy: 0.9816 - val_loss: 0.0688 - val_accuracy: 0.9833\n","Epoch 16/20\n","93/93 [==============================] - 14s 152ms/step - loss: 0.0968 - accuracy: 0.9692 - val_loss: 0.0535 - val_accuracy: 1.0000\n","Epoch 17/20\n","93/93 [==============================] - 14s 151ms/step - loss: 0.0533 - accuracy: 0.9800 - val_loss: 0.0018 - val_accuracy: 1.0000\n","Epoch 18/20\n","93/93 [==============================] - 14s 150ms/step - loss: 0.0096 - accuracy: 0.9962 - val_loss: 0.0213 - val_accuracy: 0.9833\n","Epoch 19/20\n","93/93 [==============================] - 14s 146ms/step - loss: 0.0537 - accuracy: 0.9870 - val_loss: 0.0021 - val_accuracy: 1.0000\n","Epoch 20/20\n","93/93 [==============================] - 14s 151ms/step - loss: 0.0526 - accuracy: 0.9854 - val_loss: 0.0159 - val_accuracy: 1.0000\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Y1nBDJOiLsxo"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from IPython.display import display, Javascript\n","from google.colab.output import eval_js\n","from base64 import b64decode\n","\n","def take_photo(filename='photo.jpg', quality=0.8):\n","  js = Javascript('''\n","    async function takePhoto(quality) {\n","      const div = document.createElement('div');\n","      const capture = document.createElement('button');\n","      capture.textContent = 'Capture';\n","      div.appendChild(capture);\n","\n","      const video = document.createElement('video');\n","      video.style.display = 'block';\n","      const stream = await navigator.mediaDevices.getUserMedia({video: true});\n","\n","      document.body.appendChild(div);\n","      div.appendChild(video);\n","      video.srcObject = stream;\n","      await video.play();\n","\n","      // Resize the output to fit the video element.\n","      google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);\n","\n","      // Wait for Capture to be clicked.\n","      await new Promise((resolve) => capture.onclick = resolve);\n","\n","      const canvas = document.createElement('canvas');\n","      canvas.width = video.videoWidth;\n","      canvas.height = video.videoHeight;\n","      canvas.getContext('2d').drawImage(video, 0, 0);\n","      stream.getVideoTracks()[0].stop();\n","      div.remove();\n","      return canvas.toDataURL('image/jpeg', quality);\n","    }\n","    ''')\n","  display(js)\n","  data = eval_js('takePhoto({})'.format(quality))\n","  binary = b64decode(data.split(',')[1])\n","  with open(filename, 'wb') as f:\n","    f.write(binary)\n","  return filename"],"metadata":{"id":"HZKvHcTeLus_","executionInfo":{"status":"ok","timestamp":1686752909713,"user_tz":-345,"elapsed":594,"user":{"displayName":"Aayush Shrestha","userId":"17007472471446368559"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"dxAoV-u1LutA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import keras.utils as image\n","\n","from IPython.display import Image\n","try:\n","  # filename = take_photo()\n","  # print('Saved to {}'.format(filename))\n","\n","  # ImagePath='/content/' + filename\n","  ImagePath = '/content/sample_data/preprocessed_dataset/validation/face6/face6_1_1.jpg'\n","  test_image=image.load_img(ImagePath,target_size=(64, 64))\n","  test_image=image.img_to_array(test_image)\n","\n","  test_image=np.expand_dims(test_image,axis=0)\n","\n","  result=classifier.predict(test_image,verbose=0)\n","  # print(training_set.class_indices)\n","\n","  print('####'*10)\n","  print('Prediction is: ',ResultMap[np.argmax(result)])\n","\n","  # Show the image which was just taken.\n","  # display(Image(filename))\n","except Exception as err:\n","  # Errors will be thrown if the user does not have a webcam or if they do not\n","  # grant the page permission to access it.\n","  print(str(err))\n","\n"],"metadata":{"id":"pCgAMxdOLHf-","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1686755245536,"user_tz":-345,"elapsed":820,"user":{"displayName":"Aayush Shrestha","userId":"17007472471446368559"}},"outputId":"1e401fbc-f3a5-4867-d71f-adefc0e0f582"},"execution_count":66,"outputs":[{"output_type":"stream","name":"stdout","text":["########################################\n","Prediction is:  face6\n"]}]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","\n","epochs = range(1, len(acc) + 1)\n","\n","plt.plot(epochs, acc, 'bo', label='Training acc')\n","plt.plot(epochs, val_acc, 'b', label='Validation acc')\n","plt.title('Training and validation accuracy')\n","plt.legend()\n","\n","plt.figure()\n","\n","plt.plot(epochs, loss, 'bo', label='Training loss')\n","plt.plot(epochs, val_loss, 'b', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.legend()\n","\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":887},"id":"vyG2JkT24HMv","executionInfo":{"status":"ok","timestamp":1686754195608,"user_tz":-345,"elapsed":1758,"user":{"displayName":"Aayush Shrestha","userId":"17007472471446368559"}},"outputId":"e8da1bac-1a18-4f71-c48d-38c47cf9eac2"},"execution_count":48,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B1mWuE-nZXvH","executionInfo":{"status":"ok","timestamp":1686754484603,"user_tz":-345,"elapsed":446,"user":{"displayName":"Aayush Shrestha","userId":"17007472471446368559"}},"outputId":"96f7eeef-a7fe-418d-cd5c-aa9262f59d6b"},"execution_count":50,"outputs":[{"output_type":"stream","name":"stdout","text":["1/1 [==============================] - 0s 127ms/step\n"]}]},{"cell_type":"code","source":["predicted"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"x857vAOVZvsg","executionInfo":{"status":"ok","timestamp":1686754494900,"user_tz":-345,"elapsed":3,"user":{"displayName":"Aayush Shrestha","userId":"17007472471446368559"}},"outputId":"6190ad73-d45b-4a76-95d3-5684622ecdef"},"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[6.0665150e-07, 9.7710434e-14, 1.7860731e-03, 2.1868303e-27,\n","        6.9279658e-22, 1.3564735e-14, 9.9524301e-01, 1.7471302e-25,\n","        2.9703015e-03, 1.7773487e-15]], dtype=float32)"]},"metadata":{},"execution_count":51}]},{"cell_type":"code","source":[" ImagePath = '/content/drive/MyDrive/AI/datasets/validation/face6/face6_1.jpg'\n","  test_image= cv2.imread(ImagePath)\n","  test_image = cv2.cvtColor(test_image, cv2.COLOR_BGR2RGB)\n","  test_image = cv2.resize(test_image, (64, 64))\n","  # test_image=image.img_to_array(test_image)\n","\n","  test_image=np.expand_dims(test_image,axis=0)\n","\n","  result=classifier.predict(test_image)\n","  # print(training_set.class_indices)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":241},"id":"UsAR_JOcZ1Z_","executionInfo":{"status":"error","timestamp":1686754519605,"user_tz":-345,"elapsed":448,"user":{"displayName":"Aayush Shrestha","userId":"17007472471446368559"}},"outputId":"c9d96005-3f45-41a3-888d-725f3e0d33b0"},"execution_count":52,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-52-74ebd6b6b357>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;31m# find person name\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mval\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mname_encoding_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m   \u001b[0;32mif\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'name_encoding_dict' is not defined"]}]}]}